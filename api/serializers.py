# takes the python code in our model, and translate it into a json response
from rest_framework import serializers
from .models import User

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        # matches up with room model in models.py
        # + added id field, which identifies the model
        fields = ('id', 'code', 'user', 'created_at', 'sorting_criteria')

# send a postrequest to endpoint we setup here
# postrequest: request to make something new

# this makes sure postrequest data is valid and that it corresponds
# with the correct fields needed to make a new room (guest can pause and votes to skip)
# and then gives the data back in a python format
class SortingPageSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        # user doesn't matter to front end and code ones are autogenerated
        fields = ('sorting_criteria',)


class UpdateSortedSerializer(serializers.ModelSerializer):
    code = serializers.CharField(validators=[])

    class Meta:
        model = User
        fields = ('code', 'sorting_criteria')